# 1. Создаём директорию проекта
# 2. Создаём виртуальное окружение и активируем
# 3. Создаём файл requirements.txt, куда указываем используемые
# библиотеки
# 4. Устанавливаем библиотеки при помощи pip3 install -r requirements.txt
# 5. В pycharm открываем настройки: File -> Settings -> Project
# -> Python Interpreter и выбираете версию Python из окружения
# 6. Проверить, что окружение активировано в терминале PyCharm
# 7. Создаём Django-проект django-admin startproject название_проекта .
# 8. Создаём нужные приложения python3 manage.py startapp название_приложения

# git init - инициализирует локальный репозиторий в текущей папке
# git status - проверка текущего состояния репозитория
# git add - добавление файлов в коммит
# git add . - добавление всех файлов
# git add путь_до_файла - добавление конкретных файлов
# changes to be committed - файлы, которые будут в версию
# untracked changes - файлы, которые остаются вне версии
# git commit - создание коммита (версии)
# git commit -m 'Название коммита'
# git push - отправка локальных коммитов на удалённый репозиторий
# git push название_репозитория название_ветки

# git remote - работа с удалёнными репозиториями
# git remote add  - привязка удалённого репозитория
# git remote add название ссылка_на_репозиторий
# git remote -v  список привязанных удалённых репозиториев
# git remote rm название #исключение удалённого репозитория

# git branch - работа с ветками
# git branch - просмотр всех веток (активная ветка помечается * и другим цветом)
# git branch название_ветки создание новой ветки
# git branch -D название_ветки удаление ветки
# git checkout название_ветки переход на ветку
# git checkout -b название_ветки создание ветки и переход на неё

# git pull - получение изменений из удалённого репозитория
# git pull название_репозитория название_ветки

# git stash - прячет изменения
# git stash apply - возвращает спрятанные изменения